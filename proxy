import requests
import re
import threading
import time
from flask import Flask, jsonify
from datetime import datetime, timedelta

# List of URLs to fetch proxies from
urls = [
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt",
    "https://free-proxy-list.net/uk-proxy.html",
    "https://sslproxies.org/",
    "https://free-proxy-list.net/anonymous-proxy.html",
    "https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/socks4.txt",
    "https://api.proxyscrape.com/v2/?request=getproxies&protocol=http",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt",
    "https://proxy-daily.com/",
    "https://www.proxy-list.download/HTTP",
    "https://www.proxy-list.download/SOCKS4",
    "https://www.proxy-list.download/SOCKS5",
    "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt",
    "https://www.us-proxy.org/",
    "https://www.socks-proxy.net/",
    "https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt",
    "https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/proxy.txt",
    "https://www.my-proxy.com/free-socks-4-proxy.html",
    "https://www.my-proxy.com/free-socks-5-proxy.html",
    "https://spys.one/free-proxy-list/",
    "https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies.txt",
    "https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/socks4.txt",
    "https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/socks5.txt",
    "https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/http.txt",
    "https://proxyservers.pro/proxies/socks5/",
    "https://proxyservers.pro/proxies/socks4/",
    "https://proxyservers.pro/proxies/http/",
    "https://proxylist.geonode.com/api/proxy-list?protocols=http",
    "https://proxylist.geonode.com/api/proxy-list?protocols=socks4",
    "https://proxylist.geonode.com/api/proxy-list?protocols=socks5",
    "https://www.proxynova.com/proxy-server-list/",
    "https://www.proxy-listen.de/Proxy/Proxyliste.html",
    "https://www.proxylists.net/",
    "https://openproxy.space/list/http",
    "https://openproxy.space/list/socks4",
    "https://openproxy.space/list/socks5",
    "https://www.cool-proxy.net/proxies/http_proxy_list",
    "https://spys.me/proxy.txt",
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/HTTPS_RAW.txt",
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/SOCKS5_RAW.txt",
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/SOCKS4_RAW.txt",
    "https://raw.githubusercontent.com/UserR3X/proxy-list/main/online/http.txt",
    "https://raw.githubusercontent.com/UserR3X/proxy-list/main/online/socks4.txt",
    "https://raw.githubusercontent.com/UserR3X/proxy-list/main/online/socks5.txt",
    "https://raw.githubusercontent.com/mertguvencli/http-proxy-list/main/proxy-list/data.txt",
    "https://raw.githubusercontent.com/mertguvencli/socks4-proxy-list/main/proxy-list/data.txt",
    "https://raw.githubusercontent.com/mertguvencli/socks5-proxy-list/main/proxy-list/data.txt"
]

# Regular expression to match proxy patterns
proxy_pattern = re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}:\d{2,5}\b')

# Dictionaries to store proxies by protocol with timestamps
proxies_by_protocol = {
    "socks4": {},
    "socks5": {},
    "http": {}
}

# Mutex for thread-safe operations
lock = threading.Lock()

def check_proxy(proxy, protocol):
    """Checks if a proxy is valid."""
    test_url = "http://httpbin.org/ip" if protocol == "http" else "https://httpbin.org/ip"
    proxies = {
        "http": f"http://{proxy}",
        "https": f"https://{proxy}"
    } if protocol == "http" else {
        protocol: f"{protocol}://{proxy}"
    }

    try:
        response = requests.get(test_url, proxies=proxies, timeout=5)
        if response.status_code == 200:
            return True
    except:
        return False

    return False

def fetch_proxies():
    """Fetch and categorize proxies from the URLs."""
    global proxies_by_protocol
    for url in urls:
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()

            # Extract proxies using regex
            proxies = proxy_pattern.findall(response.text)

            # Categorize proxies based on URL or content
            if "socks4" in url.lower():
                protocol = "socks4"
            elif "socks5" in url.lower():
                protocol = "socks5"
            else:
                protocol = "http"

            # Add proxies with current timestamp
            with lock:
                for proxy in proxies:
                    proxies_by_protocol[protocol][proxy] = datetime.now()
        except requests.RequestException as e:
            print(f"Failed to fetch from {url}: {e}")

def validate_proxies():
    """Validate all proxies and filter working ones."""
    global proxies_by_protocol
    for protocol, proxies in list(proxies_by_protocol.items()):
        valid_proxies = {}
        threads = []

        for proxy, timestamp in proxies.items():
            thread = threading.Thread(
                target=lambda p: valid_proxies.update({p: timestamp}) if check_proxy(p, protocol) else None,
                args=(proxy,)
            )
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        with lock:
            proxies_by_protocol[protocol] = valid_proxies

def cleanup_proxies():
    """Remove proxies older than 20 minutes."""
    global proxies_by_protocol
    cutoff_time = datetime.now() - timedelta(minutes=20)
    with lock:
        for protocol in proxies_by_protocol:
            proxies_by_protocol[protocol] = {
                proxy: timestamp
                for proxy, timestamp in proxies_by_protocol[protocol].items()
                if timestamp > cutoff_time
            }

def update_proxies():
    """Fetch, validate, and clean up proxies in a loop."""
    while True:
        fetch_proxies()
        validate_proxies()
        cleanup_proxies()

        # Write proxies to separate output files by protocol
        for protocol, proxies in proxies_by_protocol.items():
            output_file = f"proxies_{protocol}.txt"
            with open(output_file, "w") as file:
                file.write("\n".join(proxies.keys()))

        print(f"Updated proxies at {datetime.now()}.")
        time.sleep(1200)  # Wait for 20 minutes

# Start the proxy update loop in a background thread
threading.Thread(target=update_proxies, daemon=True).start()

# Flask app for serving proxies
app = Flask(__name__)

@app.route('/proxies/<protocol>', methods=['GET'])
def get_proxies(protocol):
    """API endpoint to get proxies by protocol."""
    protocol = protocol.lower()
    if protocol in proxies_by_protocol:
        with lock:
            return jsonify(list(proxies_by_protocol[protocol].keys()))
    else:
        return jsonify({"error": "Invalid protocol"}), 400

@app.route('/api-endpoints', methods=['GET'])
def list_endpoints():
    """API endpoint to list all available endpoints."""
    return jsonify({
        "http": "/proxies/http",
        "socks4": "/proxies/socks4",
        "socks5": "/proxies/socks5"
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
